-- ===============================
-- Monitoring & Alerts Scripts (SQL + Shell)
-- ===============================
/*
The Monitoring & Alerts section has been added to your toolkit. It includes:
* SQL Scripts for:
    - Instance health
    - Tablespace usage
    - Datafile checks
    - Archive destination usage
    - RMAN failure detection
    - Session monitoring
    - Blocked sessions
* Shell Script (tablespace_alert.sh) for automated alerting via email
* Cron job example to schedule alerts every hour
*/

-- 1. Instance Health Check
-- instance_health.sql
SELECT status, database_status, instance_name, host_name FROM v$instance;
SELECT name, open_mode, log_mode FROM v$database;
SELECT COUNT(*) invalid_objects FROM dba_objects WHERE status = 'INVALID';

-- 2. Tablespace Usage Monitoring
-- monitor_tablespace.sql
SELECT 
    tablespace_name,
    ROUND(used_percent, 2) AS used_pct
FROM dba_tablespace_usage_metrics
WHERE used_percent > 85;

-- 3. Datafile Autoextend Check
-- datafile_space.sql
SELECT 
    file_name, 
    tablespace_name, 
    bytes/1024/1024 AS size_mb,
    autoextensible, 
    maxbytes/1024/1024 AS max_mb
FROM dba_data_files
WHERE 
        autoextensible = 'NO' 
    OR  bytes/maxbytes > 0.9
;

-- 4. Archive Destination Usage
-- archive_dest_usage.sql
SELECT 
    DEST_ID, 
    DEST_NAME, 
    STATUS, 
    SPACE_LIMIT/1024/1024 AS limit_mb,
    SPACE_USED/1024/1024 AS used_mb,
    ROUND((SPACE_USED / SPACE_LIMIT) * 100, 2) AS used_pct
FROM V$ARCHIVED_LOG_DEST
WHERE SPACE_USED / SPACE_LIMIT > 0.85
;

-- 5. RMAN Backup Failure Monitor
-- rman_backup_check.sql
SELECT 
    STATUS, 
    TO_CHAR(START_TIME, 'YYYY-MM-DD HH24:MI') AS started,
    TO_CHAR(END_TIME, 'YYYY-MM-DD HH24:MI') AS ended,
    INPUT_TYPE, 
    OUTPUT_DEVICE_TYPE
FROM V$RMAN_BACKUP_JOB_DETAILS
WHERE 
        START_TIME > SYSDATE - 1
    AND STATUS != 'COMPLETED'
;

-- 6. Blocked Sessions Detector
-- blocked_sessions.sql
SELECT 
    s1.username || '@' || s1.machine || ' (SID=' || s1.sid || ')' AS blocker,
    s2.username || '@' || s2.machine || ' (SID=' || s2.sid || ')' AS blocked
FROM v$lock l1, v$session s1, v$lock l2, v$session s2
WHERE 
        s1.sid = l1.sid 
    AND s2.sid = l2.sid
    AND l1.BLOCK = 1 
    AND l2.request > 0
    AND l1.id1 = l2.id1 
    AND l1.id2 = l2.id2
;

-- 7. Session Load Monitoring
-- active_sessions.sql
SELECT COUNT(*) AS active_sessions
FROM v$session
WHERE status = 'ACTIVE' AND username IS NOT NULL;

-- high_cpu_sessions.sql
SELECT 
    s.sid, 
    s.serial#, 
    s.username, 
    s.program, 
    se.value/100 AS cpu_seconds
FROM 
    v$session s, 
    v$sesstat se, 
    v$statname sn
WHERE 
        se.statistic# = sn.statistic#
    AND sn.name = 'CPU used by this session'
    AND se.sid = s.sid
    AND se.value > 1000000
ORDER BY 
    se.value DESC
;

-- 8. Shell Wrapper for Tablespace Alert
-- tablespace_alert2.sh
#!/bin/bash
sqlplus -s / as sysdba <<EOF > /tmp/space_alert.txt
SET HEADING OFF
SET FEEDBACK OFF
SELECT tablespace_name, ROUND(used_percent, 2)
FROM dba_tablespace_usage_metrics
WHERE used_percent > 85;
EOF

if grep -q "%" /tmp/space_alert.txt; then
  mail -s "⚠️ Oracle Tablespace Alert on $(hostname)" dba_team@example.com < /tmp/space_alert.txt
fi



-- tablespace_alert2.sh
#!/bin/bash
sqlplus -s / as sysdba <<EOF > /tmp/space_alert.txt
SET HEADING OFF
SET FEEDBACK OFF
SELECT tablespace_name, ROUND(used_percent, 2)
FROM dba_tablespace_usage_metrics
WHERE used_percent > 85;
EOF

if grep -q "%" /tmp/space_alert.txt; then
  mail -s "⚠️ Oracle Tablespace Alert on $(hostname)" dba_team@example.com < /tmp/space_alert.txt
  # Optional: Insert into monitoring log
  sqlplus -s / as sysdba <<EOL
  INSERT INTO monitoring_alert_log (
    alert_type, alert_time, hostname, message, severity
  ) VALUES (
    'TABLESPACE_USAGE', SYSDATE, SYS_CONTEXT('USERENV','HOST'), 'Tablespace usage exceeded 85%', 'WARNING'
  );
  COMMIT;
EOL
fi

-- 9. CRON Job Example (Linux)
-- crontab -e
# Tablespace monitoring every hour
0 * * * * /u01/scripts/tablespace_alert.sh

-- 10. Monitoring Alert Log Table
-- Create table to store monitoring alert history
CREATE TABLE monitoring_alert_log (
    alert_id    NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    alert_type  VARCHAR2(100),
    alert_time  DATE DEFAULT SYSDATE,
    hostname    VARCHAR2(100),
    message     VARCHAR2(1000),
    severity    VARCHAR2(20),
    CONSTRAINT  pk_monitoring_alert PRIMARY KEY (alert_id)
);

-- 11. Monitoring Alert Summary Reports
-- alert_summary_daily.sql
SELECT 
    TO_CHAR(alert_time, 'YYYY-MM-DD') AS alert_day,
    alert_type,
    COUNT(*) AS alert_count,
    SUM(CASE WHEN severity = 'CRITICAL' THEN 1 ELSE 0 END) AS critical_count,
    SUM(CASE WHEN severity = 'WARNING' THEN 1 ELSE 0 END) AS warning_count
FROM 
    monitoring_alert_log
GROUP BY 
    TO_CHAR(alert_time, 'YYYY-MM-DD'), 
    alert_type
ORDER BY 
    alert_day DESC
;

-- alert_trend_last7.sql
SELECT 
    alert_type, 
    COUNT(*) AS occurrences
FROM monitoring_alert_log
WHERE alert_time >= SYSDATE - 7
GROUP BY alert_type
ORDER BY occurrences DESC;

-- ===============================
-- END OF MONITORING & ALERTS
-- ===============================

-- END OF TOOLKIT